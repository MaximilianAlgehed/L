token UIdent (upper (letter | digit | '_' | '-')*) ;
token LIdent (lower (letter | digit | '_' | '-')*) ;

comment "--";
comment "{-" "-}";

P. Program ::= [Decl];

terminator nonempty Decl ";";

-- All declarations
DData. Decl ::= "data" UIdent "=" [Constructor];
DFun.  Decl ::= LIdent ":" Type LIdent [LIdent] "=" Body;
DThm.  Decl ::= Thm;

TStandalone. Thm ::= "theorem" LIdent Proposition;
TUsing.      Thm ::= "theorem" LIdent Proposition "using" [LIdent];
TLemma.      Thm ::= "lemma" LIdent Proposition;
TLemmaUsing. Thm ::= "lemma" LIdent Proposition "using" [LIdent];

separator Constructor "|";

-- Propositions
PForall. Proposition ::= "forall" [LIdent] ":" Type "." Proposition;
PEqual.  Proposition ::= Expr "=" Expr;
PExpr.   Proposition ::= Expr;

separator nonempty LIdent "";

-- Constructors
C. Constructor ::= UIdent [Type];

separator Type "";

-- Types
MonoType. Type1 ::= UIdent;
--TypeVar.  Type1 ::= LIdent;
FunType.  Type  ::= Type1 "->" Type;

coercions Type 1;

-- Function Bodies
BCase. Body ::= "case" LIdent "of" [Alt] ;
BExpr. Body ::= Expr;

separator Alt "|";

A. Alt ::= Pat "->" Expr;

-- Patterns
PVar.  Pat1 ::= LIdent;
PCon.  Pat  ::= UIdent [Pat1];

coercions Pat 1;

separator Pat1 "";

-- Expressions
EVar.  Expr1 ::= LIdent;
ECon.  Expr1 ::= UIdent;
EFApp. Expr  ::= LIdent [Expr1];
ECApp. Expr  ::= UIdent [Expr1];

coercions Expr 1;

separator nonempty Expr1 "";
