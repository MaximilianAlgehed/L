token UIdent (upper (letter | digit | '_' | '-')*) ;
token LIdent (lower (letter | digit | '_' | '-')*) ;

comment "--";
comment "{-" "-}";

P. Program ::= [Decl];

terminator nonempty Decl ";";

-- All declarations
DData. Decl ::= "data" UIdent "=" [Constructor];
DFun.  Decl ::= LIdent ":" Type LIdent [LIdent] "=" Expr;
DThm.  Decl ::= Thm;

TStandalone. Thm ::= "theorem" LIdent Expr;
TUsing.      Thm ::= "theorem" LIdent Expr "using" [LIdent];
TLemma.      Thm ::= "lemma" LIdent Expr;
TLemmaUsing. Thm ::= "lemma" LIdent Expr "using" [LIdent];

separator Constructor "|";

separator nonempty LIdent "";

-- Constructors
C. Constructor ::= UIdent [Type];

separator Type "";

-- Types
MonoType. Type1 ::= UIdent;
FunType.  Type  ::= Type1 "->" Type;
Formula.  Type1 ::= "Formula";

coercions Type 1;

-- Expressions
EVar.   Expr2  ::= LIdent;
ECon.   Expr2  ::= UIdent;
EApp.   Expr1  ::= Expr2 [Expr2];
EEqual. Expr1  ::= Expr1 "=" Expr1;
ELam.   Expr   ::= "\\" LIdent ":" Type "." Expr;
EAll.   Expr   ::= "forall" [LIdent] ":" Type "." Expr;
EImpl.  Expr   ::= Expr1 "=" Expr1 "=>" Expr;
ECase.  Expr   ::= "case" Expr "of" [Alt];

coercions Expr 2;

separator nonempty Expr2 "";

-- Case alternatives
A. Alt ::= Pat "->" Expr1;

separator Alt "|";

-- Patterns
PVar.  Pat1 ::= LIdent;
PConE. Pat1 ::= UIdent;
PCon.  Pat  ::= UIdent [Pat1];

coercions Pat 1;

separator nonempty Pat1 "";
