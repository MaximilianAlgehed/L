token UIdent (upper (letter | digit | '_')*) ;
token LIdent (lower (letter | digit | '_')*) ;

comment "--";

P. Program ::= [Decl];

separator nonempty Decl "";

-- All declarations
DData. Decl ::= "data" UIdent "=" [Constructor];
DFun.  Decl ::= LIdent ":" Type LIdent [Ident] "=" Body;

separator Constructor "|";
separator Ident "";

-- Constructors
C. Constructor ::= UIdent [Type];

separator Type "";

-- Types
MonoType. Type1 ::= Ident;
FunType.  Type  ::= Type1 "->" Type;

coercions Type 1;

-- Function Bodies
BCase. Body ::= "case" Ident "of" [Alt] ;
BExpr. Body ::= Expr;

separator Alt "|";

A. Alt ::= Pat "->" Expr;

-- Patterns
PVar. Pat1 ::= Ident;
PCon. Pat  ::= UIdent [Pat1];

coercions Pat 1;

separator Pat1 "";

-- Expressions
EVar.  Expr1 ::= Ident;
EApp.  Expr  ::= Ident [Expr1];

coercions Expr 1;

separator nonempty Expr1 "";
