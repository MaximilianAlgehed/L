module L.Skel where

-- Haskell module generated by the BNF converter

import L.Abs
import L.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transUIdent :: UIdent -> Result
transUIdent x = case x of
  UIdent string -> failure x
transLIdent :: LIdent -> Result
transLIdent x = case x of
  LIdent string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  P decls -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DData uident constructors -> failure x
  DFun lident1 type_ lident2 idents body -> failure x
transConstructor :: Constructor -> Result
transConstructor x = case x of
  C uident types -> failure x
transType :: Type -> Result
transType x = case x of
  MonoType ident -> failure x
  FunType type_1 type_2 -> failure x
transBody :: Body -> Result
transBody x = case x of
  BCase ident alts -> failure x
  BExpr expr -> failure x
transAlt :: Alt -> Result
transAlt x = case x of
  A pat expr -> failure x
transPat :: Pat -> Result
transPat x = case x of
  PVar ident -> failure x
  PCon uident pats -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  EVar ident -> failure x
  EApp ident exprs -> failure x

